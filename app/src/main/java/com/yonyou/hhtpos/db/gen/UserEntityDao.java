package com.yonyou.hhtpos.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.yonyou.buyer.db.entity.UserEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USER_ENTITY".
*/
public class UserEntityDao extends AbstractDao<UserEntity, String> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property Phone = new Property(1, String.class, "phone", true, "PHONE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Token = new Property(3, String.class, "token", false, "TOKEN");
        public final static Property Its_name = new Property(4, String.class, "its_name", false, "ITS_NAME");
        public final static Property Shop_id = new Property(5, String.class, "shop_id", false, "SHOP_ID");
        public final static Property Company_id = new Property(6, String.class, "company_id", false, "COMPANY_ID");
        public final static Property Logo = new Property(7, String.class, "logo", false, "LOGO");
        public final static Property Head_image = new Property(8, String.class, "head_image", false, "HEAD_IMAGE");
        public final static Property Role = new Property(9, int.class, "role", false, "ROLE");
        public final static Property User_id = new Property(10, String.class, "user_id", false, "USER_ID");
        public final static Property Customer_gender = new Property(11, Integer.class, "customer_gender", false, "CUSTOMER_GENDER");
        public final static Property Customer_name = new Property(12, String.class, "customer_name", false, "CUSTOMER_NAME");
        public final static Property Source = new Property(13, int.class, "source", false, "SOURCE");
    }


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"PHONE\" TEXT PRIMARY KEY NOT NULL ," + // 1: phone
                "\"NAME\" TEXT," + // 2: name
                "\"TOKEN\" TEXT," + // 3: token
                "\"ITS_NAME\" TEXT," + // 4: its_name
                "\"SHOP_ID\" TEXT," + // 5: shop_id
                "\"COMPANY_ID\" TEXT," + // 6: company_id
                "\"LOGO\" TEXT," + // 7: logo
                "\"HEAD_IMAGE\" TEXT," + // 8: head_image
                "\"ROLE\" INTEGER NOT NULL ," + // 9: role
                "\"USER_ID\" TEXT," + // 10: user_id
                "\"CUSTOMER_GENDER\" INTEGER," + // 11: customer_gender
                "\"CUSTOMER_NAME\" TEXT," + // 12: customer_name
                "\"SOURCE\" INTEGER NOT NULL );"); // 13: source
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(4, token);
        }
 
        String its_name = entity.getIts_name();
        if (its_name != null) {
            stmt.bindString(5, its_name);
        }
 
        String shop_id = entity.getShop_id();
        if (shop_id != null) {
            stmt.bindString(6, shop_id);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(7, company_id);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(8, logo);
        }
 
        String head_image = entity.getHead_image();
        if (head_image != null) {
            stmt.bindString(9, head_image);
        }
        stmt.bindLong(10, entity.getRole());
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(11, user_id);
        }
 
        Integer customer_gender = entity.getCustomer_gender();
        if (customer_gender != null) {
            stmt.bindLong(12, customer_gender);
        }
 
        String customer_name = entity.getCustomer_name();
        if (customer_name != null) {
            stmt.bindString(13, customer_name);
        }
        stmt.bindLong(14, entity.getSource());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(4, token);
        }
 
        String its_name = entity.getIts_name();
        if (its_name != null) {
            stmt.bindString(5, its_name);
        }
 
        String shop_id = entity.getShop_id();
        if (shop_id != null) {
            stmt.bindString(6, shop_id);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(7, company_id);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(8, logo);
        }
 
        String head_image = entity.getHead_image();
        if (head_image != null) {
            stmt.bindString(9, head_image);
        }
        stmt.bindLong(10, entity.getRole());
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(11, user_id);
        }
 
        Integer customer_gender = entity.getCustomer_gender();
        if (customer_gender != null) {
            stmt.bindLong(12, customer_gender);
        }
 
        String customer_name = entity.getCustomer_name();
        if (customer_name != null) {
            stmt.bindString(13, customer_name);
        }
        stmt.bindLong(14, entity.getSource());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // token
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // its_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shop_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // company_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // logo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // head_image
            cursor.getInt(offset + 9), // role
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // user_id
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // customer_gender
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // customer_name
            cursor.getInt(offset + 13) // source
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIts_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShop_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompany_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLogo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHead_image(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRole(cursor.getInt(offset + 9));
        entity.setUser_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCustomer_gender(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCustomer_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSource(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserEntity entity, long rowId) {
        return entity.getPhone();
    }
    
    @Override
    public String getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getPhone();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        return entity.getPhone() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
