package com.smart.novel.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.smart.novel.bean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, String> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
        public final static Property Gender = new Property(2, int.class, "gender", false, "GENDER");
        public final static Property Chat_head_uri = new Property(3, String.class, "chat_head_uri", false, "CHAT_HEAD_URI");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Province = new Property(5, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(6, String.class, "city", false, "CITY");
        public final static Property Last_login_time = new Property(7, String.class, "last_login_time", false, "LAST_LOGIN_TIME");
        public final static Property Create_time = new Property(8, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(9, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Enable = new Property(10, int.class, "enable", false, "ENABLE");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: user_name
                "\"GENDER\" INTEGER NOT NULL ," + // 2: gender
                "\"CHAT_HEAD_URI\" TEXT," + // 3: chat_head_uri
                "\"PHONE\" TEXT," + // 4: phone
                "\"PROVINCE\" TEXT," + // 5: province
                "\"CITY\" TEXT," + // 6: city
                "\"LAST_LOGIN_TIME\" TEXT," + // 7: last_login_time
                "\"CREATE_TIME\" TEXT," + // 8: create_time
                "\"UPDATE_TIME\" TEXT," + // 9: update_time
                "\"ENABLE\" INTEGER NOT NULL );"); // 10: enable
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
        stmt.bindLong(3, entity.getGender());
 
        String chat_head_uri = entity.getChat_head_uri();
        if (chat_head_uri != null) {
            stmt.bindString(4, chat_head_uri);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(7, city);
        }
 
        String last_login_time = entity.getLast_login_time();
        if (last_login_time != null) {
            stmt.bindString(8, last_login_time);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(9, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(10, update_time);
        }
        stmt.bindLong(11, entity.getEnable());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
        stmt.bindLong(3, entity.getGender());
 
        String chat_head_uri = entity.getChat_head_uri();
        if (chat_head_uri != null) {
            stmt.bindString(4, chat_head_uri);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(7, city);
        }
 
        String last_login_time = entity.getLast_login_time();
        if (last_login_time != null) {
            stmt.bindString(8, last_login_time);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(9, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(10, update_time);
        }
        stmt.bindLong(11, entity.getEnable());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_name
            cursor.getInt(offset + 2), // gender
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chat_head_uri
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // province
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // city
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // last_login_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // create_time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // update_time
            cursor.getInt(offset + 10) // enable
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGender(cursor.getInt(offset + 2));
        entity.setChat_head_uri(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvince(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLast_login_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreate_time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdate_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEnable(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
