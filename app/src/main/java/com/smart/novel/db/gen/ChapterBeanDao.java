package com.smart.novel.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.smart.novel.bean.ChapterBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER_BEAN".
*/
public class ChapterBeanDao extends AbstractDao<ChapterBean, String> {

    public static final String TABLENAME = "CHAPTER_BEAN";

    /**
     * Properties of entity ChapterBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Book_id = new Property(1, String.class, "book_id", true, "BOOK_ID");
        public final static Property Name_cn = new Property(2, String.class, "name_cn", false, "NAME_CN");
        public final static Property Chapter_number = new Property(3, int.class, "chapter_number", false, "CHAPTER_NUMBER");
        public final static Property Chapter_name = new Property(4, String.class, "chapter_name", false, "CHAPTER_NAME");
        public final static Property Chapter_url = new Property(5, String.class, "chapter_url", false, "CHAPTER_URL");
        public final static Property Origin_website = new Property(6, String.class, "origin_website", false, "ORIGIN_WEBSITE");
        public final static Property Covor_url = new Property(7, String.class, "covor_url", false, "COVOR_URL");
        public final static Property Word_count = new Property(8, int.class, "word_count", false, "WORD_COUNT");
        public final static Property Read_count = new Property(9, int.class, "read_count", false, "READ_COUNT");
        public final static Property Create_time = new Property(10, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(11, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Latest = new Property(12, boolean.class, "latest", false, "LATEST");
        public final static Property Totol_size = new Property(13, int.class, "totol_size", false, "TOTOL_SIZE");
        public final static Property Author = new Property(14, String.class, "author", false, "AUTHOR");
    }


    public ChapterBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER_BEAN\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"BOOK_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: book_id
                "\"NAME_CN\" TEXT," + // 2: name_cn
                "\"CHAPTER_NUMBER\" INTEGER NOT NULL ," + // 3: chapter_number
                "\"CHAPTER_NAME\" TEXT," + // 4: chapter_name
                "\"CHAPTER_URL\" TEXT," + // 5: chapter_url
                "\"ORIGIN_WEBSITE\" TEXT," + // 6: origin_website
                "\"COVOR_URL\" TEXT," + // 7: covor_url
                "\"WORD_COUNT\" INTEGER NOT NULL ," + // 8: word_count
                "\"READ_COUNT\" INTEGER NOT NULL ," + // 9: read_count
                "\"CREATE_TIME\" TEXT," + // 10: create_time
                "\"UPDATE_TIME\" TEXT," + // 11: update_time
                "\"LATEST\" INTEGER NOT NULL ," + // 12: latest
                "\"TOTOL_SIZE\" INTEGER NOT NULL ," + // 13: totol_size
                "\"AUTHOR\" TEXT);"); // 14: author
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChapterBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindString(2, book_id);
        }
 
        String name_cn = entity.getName_cn();
        if (name_cn != null) {
            stmt.bindString(3, name_cn);
        }
        stmt.bindLong(4, entity.getChapter_number());
 
        String chapter_name = entity.getChapter_name();
        if (chapter_name != null) {
            stmt.bindString(5, chapter_name);
        }
 
        String chapter_url = entity.getChapter_url();
        if (chapter_url != null) {
            stmt.bindString(6, chapter_url);
        }
 
        String origin_website = entity.getOrigin_website();
        if (origin_website != null) {
            stmt.bindString(7, origin_website);
        }
 
        String covor_url = entity.getCovor_url();
        if (covor_url != null) {
            stmt.bindString(8, covor_url);
        }
        stmt.bindLong(9, entity.getWord_count());
        stmt.bindLong(10, entity.getRead_count());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(11, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(12, update_time);
        }
        stmt.bindLong(13, entity.getLatest() ? 1L: 0L);
        stmt.bindLong(14, entity.getTotol_size());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(15, author);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChapterBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindString(2, book_id);
        }
 
        String name_cn = entity.getName_cn();
        if (name_cn != null) {
            stmt.bindString(3, name_cn);
        }
        stmt.bindLong(4, entity.getChapter_number());
 
        String chapter_name = entity.getChapter_name();
        if (chapter_name != null) {
            stmt.bindString(5, chapter_name);
        }
 
        String chapter_url = entity.getChapter_url();
        if (chapter_url != null) {
            stmt.bindString(6, chapter_url);
        }
 
        String origin_website = entity.getOrigin_website();
        if (origin_website != null) {
            stmt.bindString(7, origin_website);
        }
 
        String covor_url = entity.getCovor_url();
        if (covor_url != null) {
            stmt.bindString(8, covor_url);
        }
        stmt.bindLong(9, entity.getWord_count());
        stmt.bindLong(10, entity.getRead_count());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(11, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(12, update_time);
        }
        stmt.bindLong(13, entity.getLatest() ? 1L: 0L);
        stmt.bindLong(14, entity.getTotol_size());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(15, author);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public ChapterBean readEntity(Cursor cursor, int offset) {
        ChapterBean entity = new ChapterBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // book_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name_cn
            cursor.getInt(offset + 3), // chapter_number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // chapter_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // chapter_url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // origin_website
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // covor_url
            cursor.getInt(offset + 8), // word_count
            cursor.getInt(offset + 9), // read_count
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // create_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // update_time
            cursor.getShort(offset + 12) != 0, // latest
            cursor.getInt(offset + 13), // totol_size
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // author
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChapterBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBook_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName_cn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChapter_number(cursor.getInt(offset + 3));
        entity.setChapter_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChapter_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrigin_website(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCovor_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWord_count(cursor.getInt(offset + 8));
        entity.setRead_count(cursor.getInt(offset + 9));
        entity.setCreate_time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdate_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLatest(cursor.getShort(offset + 12) != 0);
        entity.setTotol_size(cursor.getInt(offset + 13));
        entity.setAuthor(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChapterBean entity, long rowId) {
        return entity.getBook_id();
    }
    
    @Override
    public String getKey(ChapterBean entity) {
        if(entity != null) {
            return entity.getBook_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChapterBean entity) {
        return entity.getBook_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
